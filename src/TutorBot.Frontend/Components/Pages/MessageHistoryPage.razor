@page "/MessageHistoryPage"
@using System.Linq
@using TutorBot.Abstractions;
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<div class="telegram-layout">
    <!-- Боковая панель с пользователями -->
    <div class="user-sidebar">
        <div class="sidebar-header">
            <h3>Chats</h3>
            <input type="text" placeholder="Search..." class="sidebar-search" @bind="_searchQuery" />
        </div>
        <div class="user-list">
            @foreach (var user in FilteredUsers)
            {
                <div class="user-item @(_selectedUser?.ChatID == user.ChatID ? "active" : "")"
                     @onclick="() => SelectUser(user.ChatID)">
                    <div class="user-avatar"></div>
                    <div class="user-info">
                        <div class="user-name">@DisplayName(user)</div>
                        <div class="last-message">@user.LastMessage</div>
                    </div>
                    <div class="message-time">@user.TimeLastUpdate.ToString("HH:mm")</div>
                </div>
            }
        </div>
    </div>

    <!-- Основная область чата -->
    <div class="chat-container">
        <div class="chat-header">
            @if (_selectedUser != null)
            {
                <div class="chat-user-info">
                    <div class="user-avatar"></div>
                    <div class="user-name">@DisplayName(_selectedUser)</div>
                </div>
            }
            else
            {
                <h3>Select a chat</h3>
            }
        </div>

        <div class="chat-messages" id="chat-messages">
            @if (_selectedUser != null)
            {
                <!-- Блок с текущей датой (фиксированный вверху) -->
                <div class="date-divider">
                    <span>@DateTime.Now.ToString("dd MMMM yyyy")</span>
                </div>

                DateTime? prevMessageDate = null;
              
                @foreach (var message in _displayedMessages)
                {
                    var currentMessageDate = message.Timestamp.Date;
                    
                    <!-- Проверяем, изменилась ли дата сообщения -->
                    @if (prevMessageDate != null && currentMessageDate != prevMessageDate)
                    {
                        <div class="date-divider">
                            <span>@currentMessageDate.ToString("dd MMMM yyyy")</span>
                        </div>
                    }
                    
                    <div class="message @message.Type.ToString().ToLower()">
                        <div class="message-content">
                            <div class="message-text">@message.MessageText</div>
                            <div class="message-meta">
                                <span class="message-time">@message.Timestamp.ToString("HH:mm")</span>
                            </div>
                        </div>
                    </div>
                    
                    prevMessageDate = currentMessageDate;
                }
            }
            else
            {
                <div class="no-chat-selected">
                    <p>Please select a chat from the sidebar</p>
                </div>
            }
        </div>
    </div>
</div> 

<script>

    function scrollToBottom()
    {
    debugger;
    var chat_messages  =  document.getElementById("chat-messages");
    setTimeout(()=>chat_messages.scroll(0, chat_messages.scrollHeight), 100);
    }
</script>

@code {

    [Inject]
    protected IApplication _application { get; set; } = default!;

    private MessageHistory[] _displayedMessages = [];
    private ChatEntry[] _users = [];
    private string _searchQuery = string.Empty;
    private ChatEntry? _selectedUser;


    protected override async Task OnInitializedAsync()
    {
        await Task.CompletedTask;
        _users = await _application.ChatService.GetChats();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("scrollToBottom");
        }
    }

    private IEnumerable<ChatEntry> FilteredUsers => _users
        .Where(FilterChat)
        .OrderByDescending(u => u.TimeLastUpdate);

    private bool FilterChat(ChatEntry chat)
    {
        if (string.IsNullOrEmpty(_searchQuery))
            return true;

        if (chat.FirstName.Contains(_searchQuery, StringComparison.OrdinalIgnoreCase))
            return true;

        if (chat.UserName.Contains(_searchQuery, StringComparison.OrdinalIgnoreCase))
            return true;

        if (chat.LastName.Contains(_searchQuery, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private string DisplayName(ChatEntry chat)
    {
        if (!string.IsNullOrEmpty(chat.FirstName))
            return chat.FirstName;

        if (!string.IsNullOrEmpty(chat.LastName))
            return chat.LastName;

        if (!string.IsNullOrEmpty(chat.UserName))
            return chat.UserName;

        return "ChatID: " + chat.ChatID;
    }

    private async Task SelectUser(long userId)
    {
        _selectedUser = _users.FirstOrDefault(u => u.ChatID == userId) ?? _users.FirstOrDefault();

        if (_selectedUser != null)
            _displayedMessages = await GetMessages(int.MaxValue);
    }

    private async Task<MessageHistory[]> GetMessages(int offset)
    {
        if (_selectedUser == null)
            return [];

        return (await _application.HistoryService.GetMessages(_selectedUser.ChatID, offset, 5000, true)).OrderBy(x => x.ID).ToArray();
    }
}

